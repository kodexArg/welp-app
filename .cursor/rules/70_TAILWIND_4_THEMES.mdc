## Sistema de reglas — *welp-app* multi-theme con Tailwind 4.1

### 1 · Conceptos esenciales

* **Tokens de color** se declaran una sola vez con `@theme inline`; Tailwind genera utilidades (`bg-primary`, `text-text`, `bg-bg`, …). ([tailwindcss.com][1], [tailwindcss.com][2])
* El atributo `data-theme="<nombre>"` en `<html>` decide qué valores toman los tokens (`--primary`, `--secondary`, …) en tiempo real. ([simonswiss.com][3], [dev.to][4])
* Los componentes usan sólo utilidades semánticas; nunca colores fijos de la paleta (`bg-blue-500`, etc.). ([jbukuts.com][5], [simonswiss.com][3])

### 2 · Arquitectura de ficheros CSS (`@/frontend/css`)

| Orden | Fichero                                                                 | Propósito                               |
| ----: | ----------------------------------------------------------------------- | --------------------------------------- |
|     1 | **themes.css**                                                          | `@theme inline` + paletas de cada theme |
|     2 | **variables.css**                                                       | Tipografías, breakpoints y tokens extra |
|   3-7 | `base.css`, `components.css`, `animations.css`, `navbar.css`, `dev.css` | Estilos que consumen los tokens         |

> Mantén este orden en Vite/uv para que las variables existan antes de usarse. ([jbukuts.com][5], [github.com][6])

### 3 · Reescribir **themes.css**

```css
@import "tailwindcss";

/* 3.1 Tokens que Tailwind convertirá en utilidades */
@theme inline {
  --color-primary:   var(--primary);
  --color-secondary: var(--secondary);
  --color-bg:        var(--background);
  --color-text:      var(--text);
  --color-surface:   var(--surface);
  --color-border:    var(--border);
}

/* 3.2 Theme «app» (defecto) */
:root {
  --primary:   26 12 3;
  --secondary: 59 28 8;
  --background:253 246 238;
  --text:      26 12 3;
  --surface:   250 232 214;
  --border:    245 208 173;
}

/* 3.3 Theme «desk» */
[data-theme="desk"] {
  --primary:   7 18 25;
  --secondary: 15 35 50;
  --background:244 250 253;
  --text:      7 18 25;
  --surface:   230 241 249;
  --border:    204 227 243;
}

/* 3.4 Theme «payflow» */
[data-theme="payflow"] {
  --primary:   10 18 10;
  --secondary: 18 30 18;
  --background:232 237 232;
  --text:      10 18 10;
  --surface:   209 219 209;
  --border:    163 184 163;
}
```

*Valores orientativos: ajusta según tu identidad visual* ([simonswiss.com][3], [dev.to][4])

### 4 · Plantillas (Django + uv)

```html
<html lang="es" data-theme="{{ theme|default:'app' }}">
  <head>
    {% load vite %}
    <link rel="stylesheet" href="{% vite_css 'frontend/css/themes.css' %}">
  </head>

  <body class="bg-bg text-text antialiased">
    {% block content %}{% endblock %}
  </body>
</html>
```

* `theme` se decide en un middleware (cookie, subdominio o prefijo URL).

### 5 · Helper opcional **theme-switch.js**

```js
(() => {
  const qs   = new URLSearchParams(location.search).get('theme');
  const cke  = document.cookie.match(/theme=(\w+)/)?.[1];
  const next = qs || cke || 'app';
  document.documentElement.dataset.theme = next;
  document.cookie = `theme=${next};path=/;max-age=${60*60*24*30}`;
})();
```

*Ejecútalo antes del bundle principal para evitar parpadeo de estilos.* ([github.com][6], [dev.to][4])

### 6 · Reglas disciplinarias para el equipo

1. **Obligatorio** emplear sólo utilidades semánticas (`bg-primary`, `text-text`, etc.) en componentes compartidos. ([simonswiss.com][3])
2. **Prohibido** editar `tailwind.config.js`; toda configuración vive ahora en CSS (`@theme`, `@custom-variant` si hiciera falta). ([tailwindcss.com][2])
3. Añadir un nuevo theme = definir sus variables en `themes.css` y proveer una entrada válida en lógicas de backend/JS.
4. Para estilos exclusivos de un theme, crea una variante con `@custom-variant theme-<nombre>` y úsala como `theme-desk:border-dashed`. ([github.com][6])

### 7 · Pruebas mínimas

| `data-theme` | Color esperado de `.bg-primary` | Método de prueba      |
| ------------ | ------------------------------- | --------------------- |
| `app`        | marrón (#1A0C03 aprox.)         | Ver `.button-primary` |
| `desk`       | azul oscuro (#071219 aprox.)    | Igual                 |
| `payflow`    | verde oscuro (#0A120A aprox.)   | Igual                 |

Cambiar el atributo en tiempo real debe actualizar el color sin recarga. ([dev.to][7])

---

Cumple estrictamente estas reglas para mantener coherencia de diseño y un sistema de temas dinámico, limpio y mantenible en *welp-app* con Tailwind CSS 4.1.

[1]: https://tailwindcss.com/docs/theme "Theme variables - Core concepts - Tailwind CSS"
[2]: https://tailwindcss.com/blog/tailwindcss-v4 "Tailwind CSS v4.0"
[3]: https://simonswiss.com/posts/tailwind-v4-multi-theme "Tailwind CSS v4: Multi-Theme Strategy - simonswiss"
[4]: https://dev.to/praveen-sripati/how-i-built-a-multi-theme-system-using-new-tailwind-css-v4-react-27j3 "How I Built a Multi-Theme System using New Tailwind CSS v4 & React"
[5]: https://www.jbukuts.com/posts/theming-tailwind-v4 "Theming with TailwindCSS V4 - Jake Bukuts"
[6]: https://github.com/tailwindlabs/tailwindcss/discussions/15600 "[v4] Best method to use CSS variables for multiple themes? #15600"
