---
description: componente, component, widget, reutilizable, partial, bloque, módulo
globs: 
alwaysApply: false
---
# Guía para Crear Componentes django-components

Este documento establece el procedimiento exacto para crear nuevos componentes con `django-components`. Su seguimiento es **obligatorio**.

## Estructura de Archivos

Cada componente debe seguir esta estructura exacta:

```
components/
├── core/                    # Componentes de la app 'core'
│   └── nombre_componente/
│       ├── nombre_componente.py
│       ├── nombre_componente.html
│       ├── nombre_componente.css
│       └── nombre_componente.js
└── global/                  # Componentes globales (futuro)
    └── nombre_componente/
        ├── nombre_componente.py
        ├── nombre_componente.html
        ├── nombre_componente.css
        └── nombre_componente.js
```

## Procedimiento de Creación

### 1. Crear Directorio
```bash
mkdir components/{app}/nombre_componente
```

### 2. Archivo Python (obligatorio)
**Archivo**: `components/{app}/nombre_componente/nombre_componente.py`

```python
from django_components import Component, register

@register("nombre_componente")
class NombreComponente(Component):
    template_name = "nombre_componente.html"
    
    def get_context_data(self, **kwargs):
        """Procesa los parámetros y devuelve el contexto para el template"""
        return {
            "parametro": kwargs.get("parametro", "valor_default"),
            # Agregar más parámetros según necesidad
        }
    
    class Media:
        css = ["nombre_componente.css"]
        js = ["nombre_componente.js"]
```

### 3. Template HTML (obligatorio)
**Archivo**: `components/{app}/nombre_componente/nombre_componente.html`

```html
<div class="nombre-componente">
    <!-- Contenido del componente -->
    <p>{{ parametro }}</p>
</div>
```

### 4. Estilos CSS (opcional)
**Archivo**: `components/{app}/nombre_componente/nombre_componente.css`

```css
.nombre-componente {
    /* Estilos específicos del componente */
}
```

### 5. JavaScript (opcional)
**Archivo**: `components/{app}/nombre_componente/nombre_componente.js`

```javascript
// JavaScript específico del componente
function nombreComponenteFunction() {
    // Lógica del componente
}
```

### 6. Registro en apps.py
**Archivo**: `{app}/apps.py`

```python
from django.apps import AppConfig

class CoreConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'core'
    
    def ready(self):
        """Importar componentes para asegurar su registro"""
        from components.core.nombre_componente import nombre_componente  # noqa
```

## Uso en Templates

```html
<!-- Uso básico -->
{% component "nombre_componente" / %}

<!-- Con parámetros -->
{% component "nombre_componente" parametro="valor" otro_param="otro_valor" / %}
```

## Reglas Obligatorias

1. **Registro**: Siempre usar `@register("nombre_componente")`
2. **Nomenclatura**: Archivos y clases deben coincidir con el nombre del directorio
3. **Ubicación**: Componentes van en `components/{app}/` nunca dentro de la app
4. **Importación**: Agregar importación en `apps.py` del app correspondiente
5. **Métodos**: Usar `get_context_data()` para procesar parámetros
6. **Template**: Usar `template_name` no `template_file`
7. **Media**: Listas `["archivo.css"]` no strings `"archivo.css"`

## Ejemplo Completo: Componente "ping"

**Estructura**:
```
components/core/ping/
├── ping.py
├── ping.html
├── ping.css
└── ping.js
```

**ping.py**:
```python
from django_components import Component, register

@register("ping")
class Ping(Component):
    template_name = "ping.html"
    
    def get_context_data(self, ping=None, **kwargs):
        return {
            "response": "PONG" if ping else "No ping received"
        }
    
    class Media:
        css = ["ping.css"]
        js = ["ping.js"]
```

**Uso**:
```html
{% component "ping" ping="test_ping" / %}
```
