---
description: 
globs: 
alwaysApply: true
---
# Reglas para Template Tags y Componentes Django

## Estructura de Template Tags

### Ubicación OBLIGATORIA
- **Template tags van SIEMPRE en `core/templatetags/`**
- Django los encuentra automáticamente en esta ubicación
- NUNCA colocar template tags en `components/`

### Estructura de Archivos
```
core/
├── templatetags/
│   ├── __init__.py
│   ├── core_tags.py        # Tags generales/comunes del proyecto
│   ├── format_tags.py      # Formateo (fechas, números, texto)
│   └── ui_tags.py         # Helpers de UI
```

### Uso en Templates
```html
{% load core_tags %}
{% load format_tags %}
{% load ui_tags %}
```

## Estructura de Componentes Django

### Ubicación de Componentes
- **Componentes comunes/públicos**: `templates/components/core/`
- **Componentes específicos**: `templates/components/{app_name}/`
- Todos los componentes en `templates/components/core/` son públicos y reutilizables

### Estructura de Archivos por Componente
```
templates/
└── components/
    ├── core/                    # Componentes comunes/públicos
    │   ├── brand-logo.html      # Logo animado con efecto glow
    │   ├── nav-link.html        # Enlaces de navegación con estados
    │   ├── logout.html          # Botón de logout con formulario
    │   ├── separator.html       # Separador para navbar
    │   ├── status-badge.html    # Badges de estado (open, closed, etc.)
    │   └── button.html          # Botón genérico reutilizable
    └── welp_desk/              # Componentes específicos (futuro)
        ├── ticket-card.html
        └── dashboard-widget.html
```

### Formato OBLIGATORIO de Componentes

**REGLA CRÍTICA**: Cada componente usa ÚNICAMENTE un archivo `*.html`. No archivos separados de CSS o JS.

#### Estructura OBLIGATORIA del archivo HTML:
```html
<!-- templates/components/core/ejemplo.html -->

<!-- 1. HTML PRIMERO - Siempre en <div> con clase del nombre del componente -->
<div class="ejemplo">
    <h3 class="text-lg font-semibold text-gray-900">{{ title|default:"Título por defecto" }}</h3>
    <p class="text-sm text-gray-600">{{ content|default:"Contenido..." }}</p>
</div>

<!-- 2. CSS SEGUNDO - Solo si es necesario, usar @apply con clases de /frontend -->
<style>
@layer components {
    .ejemplo {
        @apply flex items-center space-x-2 p-4 rounded-lg;
        @apply bg-white border border-gray-200 shadow-sm;
    }
    
    /* Solo agregar CSS personalizado si no existe en /frontend */
    .ejemplo-special {
        @apply transition-all duration-300;
    }
}
</style>

<!-- 3. JAVASCRIPT ÚLTIMO - Solo si es necesario -->
<script>
document.addEventListener('DOMContentLoaded', function() {
    const ejemploElements = document.querySelectorAll('.ejemplo');
    ejemploElements.forEach(function(element) {
        element.addEventListener('click', function() {
            console.log('Ejemplo clickeado');
        });
    });
});
</script>
```

#### Reglas de Formato:
1. **HTML PRIMERO**: Siempre en `<div class="nombre-componente">`
2. **CSS SEGUNDO**: Solo si necesario, usando `@apply` y clases de `/frontend`
3. **JS ÚLTIMO**: Solo si necesario, con `DOMContentLoaded`
4. **REUTILIZAR**: Siempre buscar clases en `/frontend` antes de crear nuevas
5. **TAILWIND DIRECTO**: Preferir clases Tailwind en HTML cuando sea simple

### Template Tags Python
```python
# core/templatetags/core_tags.py
from django import template

register = template.Library()

@register.inclusion_tag('components/core/ejemplo.html')
def ejemplo(title="", content="", variant="default"):
    """Componente de ejemplo usando template tags"""
    return {
        "title": title,
        "content": content,
        "variant": variant,
    }
```

## Reglas de Estilos

### Tailwind 4 con @apply
- **OBLIGATORIO**: Usar `@apply` para estilos en componentes
- **OBLIGATORIO**: Envolver estilos en `@layer components`
- **Preferir**: Clases de Tailwind sobre CSS personalizado
- **Estructura**: Estilos al inicio del archivo HTML

## Reglas de JavaScript

### Ubicación y Estructura
- **JavaScript va SIEMPRE al final del archivo HTML**
- **Envolver en `document.addEventListener('DOMContentLoaded', ...)`**
- **Usar selectores específicos del componente**
- **Evitar conflictos globales**

## Configuración en Settings.py

### Template Tags se cargan automáticamente
- Los template tags en `core/templatetags/` se detectan automáticamente
- No requieren configuración adicional en `settings.py`
- Solo agregar `{% load core_tags %}` en los templates que los usen

## Uso en Templates

### Carga de Componentes:
```html
{% load core_tags %}

<!-- Componentes disponibles -->
{% brand_logo show_text=True %}
{% nav_link "core:home" "fa fa-home" "INICIO" current_view=request.resolver_match.view_name %}
{% logout_link user=user %}
{% separator %}
{% status_badge "Activo" "open" %}
{% button "Guardar" variant="primary" icon="fa fa-save" %}
{% button "Cancelar" variant="secondary" href="/back/" %}
```

### Carga de Template Tags:
```html
{% load core_tags format_tags ui_tags %}

<!-- Usar template tags -->
{{ user|user_display_name }}
{{ date|format_local_date }}
```

## Prohibiciones

### NO HACER:
- ❌ Archivos CSS separados por componente
- ❌ Archivos JS separados por componente  
- ❌ Template tags fuera de `core/templatetags/`
- ❌ CSS sin `@layer components`
- ❌ JavaScript sin `DOMContentLoaded`
- ❌ Usar django_components (obsoleto en este proyecto)

### SÍ HACER:
- ✅ Un solo archivo HTML por template tag
- ✅ Estilos con `@apply` al inicio
- ✅ JavaScript al final del HTML
- ✅ Template tags en `core/templatetags/`
- ✅ Templates de componentes en `templates/components/`
